<?php

/**
 * WebPage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kcatoes
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class WebPage extends BaseWebPage
{

  /**
   * Indique si un test est lié à la page
   * @param string $class La classe du test
   * @return boolean
   */
  public function hasTest($class)
  {
    $found = false;
    $pageTests = $this->getCollectionTests();
    foreach($pageTests as $test)
    {
      if ($test->getClass() == $class) {
        return true;
      }
    }
    return false;
  }
  
  /**
   * Récupère l'extraction de base
   * $return WebPageExtract
   */
  public function getBaseExtract()
  {
  	$extracts = $this->getCollectionExtracts();
  	foreach ($extracts as $extract)
  	{
  		if ($extract->getType() == 'base')
  		{
  			return $extract;
  		}
  	}
  	return false;
  }
  
  /**
   * Récupère l'extraction de base
   * $return WebPageExtract
   */
  public function getNoJsExtract()
  {
    $extracts = $this->getCollectionExtracts();
    foreach ($extracts as $extract)
    {
      if ($extract->getType() == 'Sans JavaScript')
      {
        return $extract;
      }
    }
    return false;
  }
  
  /**
   * Récupère l'extraction de base
   * $return WebPageExtract
   */
  public function getJsExtract()
  {
    $extracts = $this->getCollectionExtracts();
    foreach ($extracts as $extract)
    {
      if ($extract->getType() == 'Avec JavaScript')
      {
        return $extract;
      }
    }
    return false;
  }
  
  /**
   * Réalise l'extraction initiale de la source de la page 
   * @return unknown_type
   */
  public function doExtract($source='')
  {
    
    // Récupère la source si pas fournie
    if (trim($source) == '' )
    {
      $source = file_get_contents($this->getUrl());
    }
    
    // encodage UTF-8
    //$source = ExtractHelper::utf8convert($source);
    $source = ExtractHelper::fix_latin($source);
    
    // Récupération du DOCTYPE
    $doctype = null;
    $matches = array();
    $pattern = '/(<!DOCTYPE[^>]*>)/i';
    preg_match($pattern, $source, $matches);
    if (isset($matches[1]) && $matches[1] != '') {
      $doctype = $matches[1];
    }
    $this->setDoctype($doctype);
    
    // Enregistrement des sources de base
    $baseExtract = new WebPageExtract();
    $baseExtract->setWebPage($this);
    $baseExtract->setSrc($source);
    $baseExtract->setType('base');
    $baseExtract->save();          
    
    // enregistrement des sources sans JS
    $noJsSrc = ExtractHelper::fix_latin(ExtractHelper::removeJS($source, $doctype));
    $noJsExtract = new WebPageExtract();
    $noJsExtract->setWebPage($this);
    $noJsExtract->setSrc($noJsSrc);
    $noJsExtract->setType('Sans JavaScript');
    $noJsExtract->save();    
    
  }

  
}